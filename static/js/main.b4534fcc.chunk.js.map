{"version":3,"sources":["ChatBox1.js","ChatBox2.js","App.js","index.js"],"names":["Page","styled","div","Container","TextArea","textarea","Button","button","Form","form","MyRow","MyMessage","PartnerRow","PartnerMessage","ChatBox1","useState","IDone","setIDone","messages","setMessages","message","setMessage","socketRef","useRef","useEffect","current","io","connect","on","id","data","forEach","mg","msg","console","log","recieveMessage","style","color","marginTop","marginBottom","map","index","user","body","onSubmit","e","preventDefault","messageObject","emit","value","onChange","target","placeholder","ChatBox2","IDtwo","setIDtwo","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4534fcc.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\nimport io from 'socket.io-client';\r\nimport styled from \"styled-components\";\r\nimport './ChatBox.css'\r\n\r\nconst Page = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100%;\r\n  align-items: center;\r\n  justify-content:center;\r\n  background-color: black;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 650px;\r\n  max-height: 700px;\r\n  overflow: auto;\r\n  width: 700px;\r\n  border: 1px solid lightgray;\r\n  border-radius: 10px;\r\n  padding-bottom: 10px;\r\n  margin-top: 25px;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  width: 98%;\r\n  height: 150px;\r\n  border-radius: 10px;\r\n  margin-top: 10px;\r\n  padding-left: 10px;\r\n  padding-top: 10px;\r\n  font-size: 17px;\r\n  background-color: transparent;\r\n  border: 1px solid lightgray;\r\n  outline: none;\r\n  color: lightgray;\r\n  letter-spacing: 1px;\r\n  line-height: 20px;\r\n  ::placeholder {\r\n    color: lightgray;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: lightgray;\r\n  width: 100%;\r\n  border: none;\r\n  height: 70px;\r\n  margin-bottom: 30px;\r\n  border-radius: 10px;\r\n  color: black;\r\n  font-size: 20px;\r\n  cursor:pointer;\r\n  :hover {\r\n    border: 1px solid white;\r\n    background-color: black;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 700px;\r\n`;\r\n\r\nconst MyRow = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n  font-size: 22px;\r\n  font-weight: 900;\r\n  letter-spacing: 1px;\r\n`;\r\n\r\nconst MyMessage = styled.div`\r\n  min-width: 45%;\r\n  background-color: lightgray;\r\n  color: #46516e;\r\n  padding: 10px;\r\n  margin-right: 10px;\r\n  text-align: center;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst PartnerRow = styled(MyRow)`\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst PartnerMessage = styled.div`\r\n  min-width: 45%;\r\n  background-color: transparent;\r\n  color: lightgray;\r\n  border: 1px solid lightgray;\r\n  padding: 10px;\r\n  margin-left: 10px;\r\n  text-align: center;\r\n  border-radius: 8px;\r\n`;\r\n\r\n\r\nconst ChatBox1 = () => {\r\n\r\n    const [IDone, setIDone] = useState();\r\n    const [messages,setMessages] = useState([]);\r\n    const [message,setMessage] = useState(''); \r\n    \r\n    const socketRef = useRef();\r\n    \r\n    const ENDPOINT = 'https://bettercompany.herokuapp.com/'\r\n\r\n    useEffect(() => {\r\n      var connectionOptions =  {\r\n        \"force new connection\" : true,\r\n        \"reconnectionAttempts\": \"Infinity\", \r\n        \"timeout\" : 10000,                  \r\n        \"transports\" : [\"websocket\"]\r\n    };\r\n\r\n      socketRef.current = io.connect(ENDPOINT,connectionOptions);\r\n  \r\n      socketRef.current.on('id', id => {\r\n        setIDone(id);\r\n      })\r\n\r\n      socketRef.current.on('prev-messages', data =>{\r\n        data.forEach(mg => {\r\n          setMessages(messages => [...messages,mg.msg])\r\n        })\r\n      })\r\n  \r\n      socketRef.current.on('message', (message) => {\r\n        console.log(message)\r\n        recieveMessage(message);\r\n      })\r\n    },[])\r\n\r\n    const recieveMessage = (message) => {\r\n      setMessages(messages => [...messages,message])\r\n    }\r\n  \r\n    const sendMessage = (e) => {\r\n      e.preventDefault();\r\n      const messageObject = {\r\n        body:message,\r\n        id:IDone,\r\n        user: 'user1'\r\n      };\r\n      setMessage('');\r\n      socketRef.current.emit('send message', messageObject);\r\n    }\r\n  \r\n    const handleChange = (e) => {\r\n      setMessage(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Page>\r\n        {console.log('jcjds',messages)}\r\n          <h1 style={{color:'white',marginTop:'20px',marginBottom:'0'}}>User 1</h1>\r\n            <Container>\r\n            {messages.map((message, index) => {\r\n                if (message.user === 'user1' && message.body !== \"\") {\r\n                return (\r\n                    <MyRow key={index}>\r\n                    <MyMessage>\r\n                        {message.body}\r\n                    </MyMessage>\r\n                    </MyRow>\r\n                )\r\n                }\r\n                if (message.body !== \"\"){\r\n                    return (\r\n                    <PartnerRow key={index}>\r\n                        <PartnerMessage>\r\n                        {message.body}\r\n                        </PartnerMessage>\r\n                    </PartnerRow>\r\n                    )\r\n                }\r\n            })}\r\n            </Container>\r\n              <Form onSubmit={sendMessage}>\r\n                  <TextArea value={message} onChange={handleChange} placeholder=\"Type here\" />\r\n                  <Button>Send</Button>\r\n              </Form>\r\n      </Page>\r\n    )\r\n}\r\n\r\nexport default ChatBox1;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\nimport io from 'socket.io-client';\r\nimport styled from \"styled-components\";\r\n\r\nconst Page = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100%;\r\n  align-items: center;\r\n  justify-content:center;\r\n  background-color: black;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 650px;\r\n  max-height: 700px;\r\n  overflow: auto;\r\n  width: 700px;\r\n  border: 1px solid lightgray;\r\n  border-radius: 10px;\r\n  padding-bottom: 10px;\r\n  margin-top: 25px;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  width: 98%;\r\n  height: 150px;\r\n  border-radius: 10px;\r\n  margin-top: 10px;\r\n  padding-left: 10px;\r\n  padding-top: 10px;\r\n  font-size: 17px;\r\n  background-color: transparent;\r\n  border: 1px solid lightgray;\r\n  outline: none;\r\n  color: lightgray;\r\n  letter-spacing: 1px;\r\n  line-height: 20px;\r\n  ::placeholder {\r\n    color: lightgray;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: lightgray;\r\n  width: 100%;\r\n  border: none;\r\n  height: 70px;\r\n  margin-bottom: 30px;\r\n  border-radius: 10px;\r\n  color: black;\r\n  font-size: 20px;\r\n  cursor:pointer;\r\n  :hover {\r\n    border: 1px solid white;\r\n    background-color: black;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 700px;\r\n`;\r\n\r\nconst MyRow = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n  font-size: 22px;\r\n  font-weight: 900;\r\n  letter-spacing: 1px;\r\n`;\r\n\r\nconst MyMessage = styled.div`\r\n  min-width: 45%;\r\n  background-color: lightgray;\r\n  color: #46516e;\r\n  padding: 10px;\r\n  margin-right: 10px;\r\n  text-align: center;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst PartnerRow = styled(MyRow)`\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst PartnerMessage = styled.div`\r\n  min-width: 45%;\r\n  background-color: transparent;\r\n  color: lightgray;\r\n  border: 1px solid lightgray;\r\n  padding: 10px;\r\n  margin-left: 10px;\r\n  text-align: center;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst ChatBox2 = () => {\r\n\r\n    const [IDtwo, setIDtwo] = useState();\r\n    const [messages,setMessages] = useState([]);\r\n    const [message,setMessage] = useState(''); \r\n  \r\n    const socketRef = useRef();\r\n  \r\n    const ENDPOINT = 'https://bettercompany.herokuapp.com/'\r\n  \r\n    useEffect(() => {\r\n        var connectionOptions =  {\r\n            \"force new connection\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\", \r\n            \"timeout\" : 10000,                  \r\n            \"transports\" : [\"websocket\"]\r\n        };\r\n\r\n      socketRef.current = io.connect(ENDPOINT,connectionOptions);\r\n  \r\n      socketRef.current.on('id', id => {\r\n        setIDtwo(id);\r\n      })\r\n\r\n      socketRef.current.on('prev-messages', data =>{\r\n        data.forEach(mg => {\r\n          setMessages(messages => [...messages,mg.msg])\r\n        })\r\n      })\r\n  \r\n      socketRef.current.on('message', (message) => {\r\n        console.log(message)\r\n        recieveMessage(message);\r\n      })\r\n    },[])\r\n  \r\n    const recieveMessage = (message) => {\r\n      setMessages(messages => [...messages,message])\r\n    }\r\n  \r\n    const sendMessage = (e) => {\r\n      e.preventDefault();\r\n      const messageObject = {\r\n        body:message,\r\n        id:IDtwo,\r\n        user: 'user2'\r\n      };\r\n      setMessage('');\r\n      socketRef.current.emit('send message', messageObject);\r\n    }\r\n  \r\n    const handleChange = (e) => {\r\n      setMessage(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Page>\r\n        <h1 style={{color:'white',marginTop:'20px',marginBottom:'0'}}>User 2</h1>\r\n            <Container>\r\n            {messages.map((message, index) => {\r\n                if (message.user === 'user2' && message.body !== \"\") {\r\n                return (\r\n                    <MyRow key={index}>\r\n                    <MyMessage>\r\n                        {message.body}\r\n                    </MyMessage>\r\n                    </MyRow>\r\n                )\r\n                }\r\n                if (message.body !== \"\"){\r\n                    return (\r\n                    <PartnerRow key={index}>\r\n                        <PartnerMessage>\r\n                        {message.body}\r\n                        </PartnerMessage>\r\n                    </PartnerRow>\r\n                    )\r\n                }\r\n            })}\r\n            </Container>\r\n            <Form onSubmit={sendMessage}>\r\n                <TextArea value={message} onChange={handleChange} placeholder=\"Type here\" />\r\n                <Button>Send</Button>\r\n            </Form>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default ChatBox2;","import React from 'react';\nimport './App.css';\nimport ChatBox1 from './ChatBox1'\nimport ChatBox2 from './ChatBox2'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <ChatBox1 />\n      <ChatBox2 />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}